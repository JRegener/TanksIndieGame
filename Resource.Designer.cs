//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TanksIndieGame {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TanksIndieGame.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 420 core
        ///
        ///in vec2 pass_textureCoordinates;
        ///in vec3 surfaceNormal;
        ///in vec3 toLightVector;
        ///
        ///out vec4 out_Color;
        ///
        ///uniform sampler2D textureImg;	
        ///uniform vec3 lightColor;
        ///
        ///void main(void){
        ///
        ///	vec4 textureColor = texture(textureImg, pass_textureCoordinates);
        ///
        ///	vec3 unitNormal = normalize(surfaceNormal);
        ///	vec3 unitLightVector = normalize(toLightVector);
        ///	float nDotl = dot(unitNormal, unitLightVector);
        ///	float brightness = max(nDotl, 0.0);
        ///	vec3 diffuse = brightness * lightColor;
        ///
        ///	out_ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string fragmentModelShader {
            get {
                return ResourceManager.GetString("fragmentModelShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 420 core
        ///
        ///in vec3 position;
        ///in vec2 textureCoordinates;
        ///in vec3 normal;
        ///
        ///out vec2 pass_textureCoordinates;
        ///out vec3 surfaceNormal;
        ///out vec3 toLightVector;
        ///
        ///uniform mat4 transformationMatrix;
        ///uniform mat4 projectionMatrix;
        ///uniform mat4 viewMatrix;
        ///
        ///uniform vec3 lightPosition;
        ///
        ///
        ///void main(void){
        ///
        ///	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
        ///	gl_Position = projectionMatrix * viewMatrix * worldPosition;
        ///	
        ///	pass_textureCoordinates = textureCoordinates;
        ///
        ///	surfa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string vertexModelShader {
            get {
                return ResourceManager.GetString("vertexModelShader", resourceCulture);
            }
        }
    }
}
